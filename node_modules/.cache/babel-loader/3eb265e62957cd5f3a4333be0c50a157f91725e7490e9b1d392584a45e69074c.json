{"ast":null,"code":"import{signInWithPopup,signOut}from'firebase/auth';import{auth,googleProvider}from'../config/firebase';// Sign in with Google\nexport const signInWithGoogle=async()=>{try{const result=await signInWithPopup(auth,googleProvider);return result.user;}catch(error){console.error('Error signing in with Google:',error);throw error;}};// Sign out\nexport const signOutUser=async()=>{try{await signOut(auth);}catch(error){console.error('Error signing out:',error);throw error;}};// Get current user\nexport const getCurrentUser=()=>{return auth.currentUser;};// Listen to auth state changes\nexport const onAuthStateChanged=callback=>{return auth.onAuthStateChanged(callback);};// Get user profile from Google\nexport const getUserProfile=async user=>{try{const response=await fetch(\"https://www.googleapis.com/oauth2/v2/userinfo?access_token=\".concat(await user.getIdToken()));if(!response.ok){throw new Error('Failed to fetch user profile');}return await response.json();}catch(error){console.error('Error fetching user profile:',error);throw error;}};","map":{"version":3,"names":["signInWithPopup","signOut","auth","googleProvider","signInWithGoogle","result","user","error","console","signOutUser","getCurrentUser","currentUser","onAuthStateChanged","callback","getUserProfile","response","fetch","concat","getIdToken","ok","Error","json"],"sources":["/Users/ronak/Downloads/Know-Flow/Know-Flow/src/utils/googleAuth.ts"],"sourcesContent":["import { signInWithPopup, signOut, User } from 'firebase/auth';\nimport { auth, googleProvider } from '../config/firebase';\n\n// Sign in with Google\nexport const signInWithGoogle = async (): Promise<User> => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    return result.user;\n  } catch (error) {\n    console.error('Error signing in with Google:', error);\n    throw error;\n  }\n};\n\n// Sign out\nexport const signOutUser = async (): Promise<void> => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error('Error signing out:', error);\n    throw error;\n  }\n};\n\n// Get current user\nexport const getCurrentUser = (): User | null => {\n  return auth.currentUser;\n};\n\n// Listen to auth state changes\nexport const onAuthStateChanged = (callback: (user: User | null) => void) => {\n  return auth.onAuthStateChanged(callback);\n};\n\n// Get user profile from Google\nexport const getUserProfile = async (user: User) => {\n  try {\n    const response = await fetch(\n      `https://www.googleapis.com/oauth2/v2/userinfo?access_token=${await user.getIdToken()}`\n    );\n    if (!response.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAASA,eAAe,CAAEC,OAAO,KAAc,eAAe,CAC9D,OAASC,IAAI,CAAEC,cAAc,KAAQ,oBAAoB,CAEzD;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAAA,CAAA,GAA2B,CACzD,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAL,eAAe,CAACE,IAAI,CAAEC,cAAc,CAAC,CAC1D,MAAO,CAAAE,MAAM,CAACC,IAAI,CACpB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,WAAW,CAAG,KAAAA,CAAA,GAA2B,CACpD,GAAI,CACF,KAAM,CAAAR,OAAO,CAACC,IAAI,CAAC,CACrB,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,cAAc,CAAGA,CAAA,GAAmB,CAC/C,MAAO,CAAAR,IAAI,CAACS,WAAW,CACzB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAIC,QAAqC,EAAK,CAC3E,MAAO,CAAAX,IAAI,CAACU,kBAAkB,CAACC,QAAQ,CAAC,CAC1C,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAO,CAAAR,IAAU,EAAK,CAClD,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,+DAAAC,MAAA,CACoC,KAAM,CAAAX,IAAI,CAACY,UAAU,CAAC,CAAC,CACvF,CAAC,CACD,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAC,CACjD,CACA,MAAO,MAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOd,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}